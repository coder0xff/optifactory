#!/usr/bin/env node

/**
 * Generates a versioned recipe index file for URL compression
 * This creates an immutable mapping of recipe names to bit positions
 * that must be preserved forever for backward compatibility
 */

import { get_all_recipes } from '../recipes.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function generateRecipeIndex(version) {
    if (!version) {
        throw new Error('Version number is required');
    }
    
    console.log(`Generating recipe index v${version}...\n`);
    
    // Get all recipes
    const allRecipes = get_all_recipes();
    
    // Get recipe names and sort alphabetically for deterministic ordering
    const sortedRecipes = Object.keys(allRecipes).sort();
    
    console.log(`Found ${sortedRecipes.length} unique recipes`);
    console.log(`Bitmap size: ${Math.ceil(sortedRecipes.length / 8)} bytes`);
    console.log(`vs JSON array: ~${JSON.stringify(sortedRecipes).length} bytes\n`);
    
    // Generate the output file content
    const fileContent = `/**
 * Recipe Index Version ${version}
 * 
 * This file maps recipe names to bit positions for efficient URL encoding.
 * 
 * WARNING: This mapping MUST NEVER CHANGE once published!
 * If recipes are added/removed/renamed in the game, create a new version file.
 * 
 * HOW TO CREATE NEW VERSIONS:
 *   Run: node scripts/generate-recipe-index.js <version>
 *   Example: node scripts/generate-recipe-index.js 2
 *   Then update imports in state-encoding.js to use the new version
 * 
 * Generated by: scripts/generate-recipe-index.js
 * Generated: ${new Date().toISOString()}
 * Total recipes: ${sortedRecipes.length}
 * Bitmap size: ${Math.ceil(sortedRecipes.length / 8)} bytes
 */

// Recipe name to bit index mapping
export const RECIPE_INDEX_V${version} = ${JSON.stringify(sortedRecipes, null, 4)};

// Quick lookup: recipe name -> bit index
export const RECIPE_TO_INDEX_V${version} = new Map(
    RECIPE_INDEX_V${version}.map((name, index) => [name, index])
);

// Metadata
export const RECIPE_INDEX_VERSION = ${version};
export const RECIPE_COUNT = ${sortedRecipes.length};
export const BITMAP_BYTES = ${Math.ceil(sortedRecipes.length / 8)};
`;
    
    // Write to file
    const outputPath = path.join(__dirname, '..', `recipe-index-v${version}.js`);
    
    // Check if file already exists
    if (fs.existsSync(outputPath)) {
        console.error(`\n✗ Error: recipe-index-v${version}.js already exists!`);
        console.error('   This mapping is immutable and should not be changed.');
        console.error('   If recipes have changed, use a new version number.');
        console.error(`   To regenerate, delete the file first: rm recipe-index-v${version}.js\n`);
        return null;
    }
    
    fs.writeFileSync(outputPath, fileContent, 'utf8');
    
    console.log(`✓ Generated: recipe-index-v${version}.js`);
    console.log(`\nFirst 10 recipes (sample):`);
    sortedRecipes.slice(0, 10).forEach((name, idx) => {
        console.log(`  [${idx}] ${name}`);
    });
    console.log('  ...');
    
    return {
        version: version,
        count: sortedRecipes.length,
        bytes: Math.ceil(sortedRecipes.length / 8)
    };
}

// Run if executed directly
// Note: On Windows, process.argv[1] uses backslashes, but import.meta.url uses forward slashes
// So we need to normalize the comparison
const isMainModule = import.meta.url.endsWith(process.argv[1].replace(/\\/g, '/'));

if (isMainModule || process.argv[1]?.includes('generate-recipe-index.js')) {
    try {
        // Parse version from command line arguments
        // argv[0] = node, argv[1] = script path, argv[2] = version
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.error('✗ Error: Version number required\n');
            console.error('Usage: node scripts/generate-recipe-index.js <version>');
            console.error('Example: node scripts/generate-recipe-index.js 1');
            console.error('         node scripts/generate-recipe-index.js 2');
            process.exit(1);
        }
        
        const version = parseInt(args[0], 10);
        if (isNaN(version) || version < 1) {
            console.error(`✗ Error: Invalid version number "${args[0]}"`);
            console.error('Version must be a positive integer (1, 2, 3, ...)');
            process.exit(1);
        }
        
        const result = generateRecipeIndex(version);
        if (result === null) {
            // Refused to overwrite existing version
            process.exit(1);
        }
        console.log('\n✓ Recipe index generation complete!');
        process.exit(0);
    } catch (error) {
        console.error('✗ Error generating recipe index:', error);
        console.error(error.stack);
        process.exit(1);
    }
}

export { generateRecipeIndex };

